// Code generated by hertz generator.

package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/xinjiyuan97/labor-clients/config"
	"github.com/xinjiyuan97/labor-clients/dal"
	"github.com/xinjiyuan97/labor-clients/dal/mysql"
	"github.com/xinjiyuan97/labor-clients/models"
	"github.com/xinjiyuan97/labor-clients/utils"
)

const (
	ModeServer  = "server"
	ModeMigrate = "migrate"
)

func main() {
	// 解析命令行参数
	var (
		mode    = flag.String("mode", ModeServer, "运行模式: server(启动服务器) | migrate(数据库迁移)")
		env     = flag.String("env", "example", "环境配置: example | prod")
		help    = flag.Bool("help", false, "显示帮助信息")
		version = flag.Bool("version", false, "显示版本信息")
	)
	flag.Parse()

	// 显示帮助信息
	if *help {
		showHelp()
		return
	}

	// 显示版本信息
	if *version {
		showVersion()
		return
	}

	// 验证运行模式
	if *mode != ModeServer && *mode != ModeMigrate {
		log.Fatalf("无效的运行模式: %s，支持的模式: %s, %s", *mode, ModeServer, ModeMigrate)
	}

	// 加载配置
	cfg, err := loadConfig(*env)
	if err != nil {
		log.Fatalf("加载配置失败: %v", err)
	}

	// 初始化基础组件
	if err := initBaseComponents(cfg); err != nil {
		log.Fatalf("初始化基础组件失败: %v", err)
	}

	// 根据模式执行不同操作
	switch *mode {
	case ModeServer:
		runServer(cfg)
	case ModeMigrate:
		runMigrate(cfg)
	default:
		log.Fatalf("未知的运行模式: %s", *mode)
	}
}

// loadConfig 加载配置文件
func loadConfig(env string) (*config.Config, error) {
	// 优先使用环境变量
	if envVar := os.Getenv("ENV"); envVar != "" {
		env = envVar
	}

	// 构建配置文件路径
	cfgPath := fmt.Sprintf("conf/config.%s.yaml", env)

	// 如果指定环境的配置文件不存在，尝试使用默认配置
	if _, err := os.Stat(cfgPath); os.IsNotExist(err) {
		defaultCfgPath := "conf/config.yaml"
		if _, err := os.Stat(defaultCfgPath); err == nil {
			cfgPath = defaultCfgPath
		}
	}

	// 加载配置
	cfg, err := config.LoadConfig(cfgPath)
	if err != nil {
		return nil, fmt.Errorf("加载配置文件 %s 失败: %v", cfgPath, err)
	}

	// 验证配置
	if err := cfg.Validate(); err != nil {
		return nil, fmt.Errorf("配置验证失败: %v", err)
	}

	utils.Infof("配置信息: %+v", utils.ToPrettyJSON(cfg))
	return cfg, nil
}

// initBaseComponents 初始化基础组件
func initBaseComponents(cfg *config.Config) error {
	// 初始化雪花算法
	if err := utils.InitSnowflake(cfg.Snowflake.NodeID); err != nil {
		return fmt.Errorf("初始化雪花算法失败: %v", err)
	}

	// 初始化日志
	if err := utils.InitLogger(&utils.LogConfig{
		Level:      cfg.Log.Level,
		Format:     cfg.Log.Format,
		Output:     cfg.Log.Output,
		FilePath:   cfg.Log.FilePath,
		MaxSize:    cfg.Log.MaxSize,
		MaxBackups: cfg.Log.MaxBackups,
		MaxAge:     cfg.Log.MaxAge,
		Compress:   cfg.Log.Compress,
	}); err != nil {
		return fmt.Errorf("初始化日志失败: %v", err)
	}

	// 初始化数据访问层
	if err := dal.InitDAL(cfg); err != nil {
		return fmt.Errorf("初始化数据访问层失败: %v", err)
	}

	return nil
}

// runServer 启动服务器
func runServer(cfg *config.Config) {
	utils.Info("启动服务器模式...")

	// 创建 Hertz 服务器
	h := server.Default(
		server.WithHostPorts(cfg.Server.GetServerAddr()),
		server.WithReadTimeout(time.Duration(cfg.Server.ReadTimeout)*time.Second),
		server.WithWriteTimeout(time.Duration(cfg.Server.WriteTimeout)*time.Second),
		server.WithIdleTimeout(time.Duration(cfg.Server.IdleTimeout)*time.Second),
	)

	// 注册路由
	register(h)

	// 记录配置信息
	utils.LogWithFields(map[string]interface{}{
		"mode":          "server",
		"server_host":   cfg.Server.Host,
		"server_port":   cfg.Server.Port,
		"database_host": cfg.Database.Host,
		"redis_host":    cfg.Redis.Host,
		"log_level":     cfg.Log.Level,
	}).Info("服务器启动配置")

	utils.Info("服务器启动成功，开始监听请求...")

	// 启动服务器
	h.Spin()
}

// runMigrate 执行数据库迁移
func runMigrate(cfg *config.Config) {
	utils.Info("启动数据库迁移模式...")

	// 确保 MySQL 连接已初始化
	if mysql.GetDB() == nil {
		log.Fatal("MySQL 数据库连接未初始化，请检查配置")
	}

	// 获取所有模型
	models := []interface{}{
		&models.User{},
		&models.Employer{},
		&models.Worker{},
		&models.Brand{},
		&models.Job{},
		&models.JobCategory{},
		&models.JobTag{},
		&models.JobApplication{},
		&models.AttendanceRecord{},
		&models.Schedule{},
		&models.Payment{},
		&models.Review{},
		&models.Message{},
		&models.CommunityPost{},
		&models.UserFavoriteJob{},
	}

	utils.LogWithFields(map[string]interface{}{
		"mode":          "migrate",
		"database_host": cfg.Database.Host,
		"database_name": cfg.Database.Database,
		"model_count":   len(models),
	}).Info("开始数据库迁移")

	// 执行自动迁移
	if err := mysql.AutoMigrate(models...); err != nil {
		utils.Errorf("数据库迁移失败: %v", err)
		log.Fatal(err)
	}

	utils.Info("数据库迁移完成")

	// 显示迁移后的表信息
	db := mysql.GetDB()
	var tables []string
	if err := db.Raw("SHOW TABLES").Scan(&tables).Error; err != nil {
		utils.Errorf("获取表列表失败: %v", err)
	} else {
		utils.LogWithFields(map[string]interface{}{
			"tables": tables,
		}).Info("数据库表列表")
	}
}

// showHelp 显示帮助信息
func showHelp() {
	fmt.Println("零工APP后端服务")
	fmt.Println()
	fmt.Println("用法:")
	fmt.Println("  main [选项]")
	fmt.Println()
	fmt.Println("选项:")
	fmt.Println("  -mode string")
	fmt.Printf("        运行模式: %s(启动服务器) | %s(数据库迁移) (默认: %s)\n", ModeServer, ModeMigrate, ModeServer)
	fmt.Println("  -env string")
	fmt.Println("        环境配置: example | prod (默认: example)")
	fmt.Println("  -help")
	fmt.Println("        显示帮助信息")
	fmt.Println("  -version")
	fmt.Println("        显示版本信息")
	fmt.Println()
	fmt.Println("示例:")
	fmt.Println("  # 启动服务器")
	fmt.Println("  main -mode server -env example")
	fmt.Println()
	fmt.Println("  # 执行数据库迁移")
	fmt.Println("  main -mode migrate -env prod")
	fmt.Println()
	fmt.Println("  # 使用环境变量")
	fmt.Println("  ENV=prod main -mode server")
}

// showVersion 显示版本信息
func showVersion() {
	fmt.Println("零工APP后端服务")
	fmt.Println("版本: 1.0.0")
	fmt.Println("构建时间:", time.Now().Format("2006-01-02 15:04:05"))
	fmt.Println("Go版本:", "go1.21.2")
}
